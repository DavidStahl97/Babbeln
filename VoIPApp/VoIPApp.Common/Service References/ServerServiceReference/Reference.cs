//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VoIPApp.Common.ServerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerServiceReference.IServerService", CallbackContract=typeof(VoIPApp.Common.ServerServiceReference.IServerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/SendMessage")]
        void SendMessage(SharedCode.Models.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(SharedCode.Models.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Call")]
        void Call(MongoDB.Bson.ObjectId receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Call")]
        System.Threading.Tasks.Task CallAsync(MongoDB.Bson.ObjectId receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/CancelCall")]
        void CancelCall(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/CancelCall")]
        System.Threading.Tasks.Task CancelCallAsync(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/AcceptCall")]
        void AcceptCall(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/AcceptCall")]
        System.Threading.Tasks.Task AcceptCallAsync(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/SendFriendRequest", ReplyAction="http://tempuri.org/IServerService/SendFriendRequestResponse")]
        SharedCode.Models.User SendFriendRequest(string friendName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/SendFriendRequest", ReplyAction="http://tempuri.org/IServerService/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<SharedCode.Models.User> SendFriendRequestAsync(string friendName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/Subscribe", ReplyAction="http://tempuri.org/IServerService/SubscribeResponse")]
        MongoDB.Bson.ObjectId Subscribe(string userName, string password, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/Subscribe", ReplyAction="http://tempuri.org/IServerService/SubscribeResponse")]
        System.Threading.Tasks.Task<MongoDB.Bson.ObjectId> SubscribeAsync(string userName, string password, string ip);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/ReplyToFriendRequest")]
        void ReplyToFriendRequest(MongoDB.Bson.ObjectId friendId, bool accept);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/ReplyToFriendRequest")]
        System.Threading.Tasks.Task ReplyToFriendRequestAsync(MongoDB.Bson.ObjectId friendId, bool accept);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/Register", ReplyAction="http://tempuri.org/IServerService/RegisterResponse")]
        string Register(string userName, string password, string email, string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/Register", ReplyAction="http://tempuri.org/IServerService/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(string userName, string password, string email, string ip);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnMessageReceived")]
        void OnMessageReceived(SharedCode.Models.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnCall")]
        void OnCall(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnCallAccepted")]
        void OnCallAccepted(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnCallCancelled")]
        void OnCallCancelled(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnFriendStatusChanged")]
        void OnFriendStatusChanged(MongoDB.Bson.ObjectId friendId, SharedCode.Models.Status status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnFriendshipRequested")]
        void OnFriendshipRequested(MongoDB.Bson.ObjectId friendId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OnFriendshipRequestAnswered")]
        void OnFriendshipRequestAnswered(MongoDB.Bson.ObjectId friendId, bool accept);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceChannel : VoIPApp.Common.ServerServiceReference.IServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServiceClient : System.ServiceModel.DuplexClientBase<VoIPApp.Common.ServerServiceReference.IServerService>, VoIPApp.Common.ServerServiceReference.IServerService {
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(SharedCode.Models.Message msg) {
            base.Channel.SendMessage(msg);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(SharedCode.Models.Message msg) {
            return base.Channel.SendMessageAsync(msg);
        }
        
        public void Call(MongoDB.Bson.ObjectId receiver) {
            base.Channel.Call(receiver);
        }
        
        public System.Threading.Tasks.Task CallAsync(MongoDB.Bson.ObjectId receiver) {
            return base.Channel.CallAsync(receiver);
        }
        
        public void CancelCall(MongoDB.Bson.ObjectId friendId) {
            base.Channel.CancelCall(friendId);
        }
        
        public System.Threading.Tasks.Task CancelCallAsync(MongoDB.Bson.ObjectId friendId) {
            return base.Channel.CancelCallAsync(friendId);
        }
        
        public void AcceptCall(MongoDB.Bson.ObjectId friendId) {
            base.Channel.AcceptCall(friendId);
        }
        
        public System.Threading.Tasks.Task AcceptCallAsync(MongoDB.Bson.ObjectId friendId) {
            return base.Channel.AcceptCallAsync(friendId);
        }
        
        public SharedCode.Models.User SendFriendRequest(string friendName) {
            return base.Channel.SendFriendRequest(friendName);
        }
        
        public System.Threading.Tasks.Task<SharedCode.Models.User> SendFriendRequestAsync(string friendName) {
            return base.Channel.SendFriendRequestAsync(friendName);
        }
        
        public MongoDB.Bson.ObjectId Subscribe(string userName, string password, string ip) {
            return base.Channel.Subscribe(userName, password, ip);
        }
        
        public System.Threading.Tasks.Task<MongoDB.Bson.ObjectId> SubscribeAsync(string userName, string password, string ip) {
            return base.Channel.SubscribeAsync(userName, password, ip);
        }
        
        public void ReplyToFriendRequest(MongoDB.Bson.ObjectId friendId, bool accept) {
            base.Channel.ReplyToFriendRequest(friendId, accept);
        }
        
        public System.Threading.Tasks.Task ReplyToFriendRequestAsync(MongoDB.Bson.ObjectId friendId, bool accept) {
            return base.Channel.ReplyToFriendRequestAsync(friendId, accept);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public string Register(string userName, string password, string email, string ip) {
            return base.Channel.Register(userName, password, email, ip);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string userName, string password, string email, string ip) {
            return base.Channel.RegisterAsync(userName, password, email, ip);
        }
    }
}
